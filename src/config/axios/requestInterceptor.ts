import { axiosInstance } from "@/config/axios/axiosInstance";

// Funci√≥n para obtener token desde cookies
const getTokenFromCookies = (): string | null => {
  if (typeof document === "undefined") return null;

  const cookieToken = document.cookie
    .split("; ")
    .find((row) => row.startsWith("token="));

  return cookieToken ? cookieToken.split("=")[1] : null;
};

// Funci√≥n para obtener token desde Supabase usando el cliente existente
const getTokenFromSupabase = async (): Promise<string | null> => {
  try {
    console.log("üîç Intentando obtener token desde Supabase...");
    
    // Usar el createClient centralizado en lugar de crear uno nuevo
    const { createClient } = await import("@/lib/supabase/client");
    const supabase = createClient();

    // Usar getUser() en lugar de getSession() para validaci√≥n segura
    const {
      data: { user },
      error: userError,
    } = await supabase.auth.getUser();

    if (userError || !user) {
      console.log("‚ö†Ô∏è Usuario no v√°lido o no autenticado:", userError?.message);
      return null;
    }

    // Si el usuario es v√°lido, obtener la sesi√≥n
    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.getSession();

    console.log("üìã Estado de autenticaci√≥n:", {
      hasUser: !!user,
      hasSession: !!session,
      userEmail: user?.email || "N/A",
      hasToken: !!session?.access_token,
      sessionError: sessionError?.message || "N/A",
    });

    return session?.access_token || null;
  } catch (error) {
    console.error("‚ùå Error getting token from Supabase:", error);
    return null;
  }
};

// Interceptor para agregar el token a las peticiones
axiosInstance.interceptors.request.use(
  async (config) => {
    console.log("üöÄ === INTERCEPTOR DE AXIOS EJECUT√ÅNDOSE ===");
    try {
      // Solo ejecutar interceptor en el cliente
      if (typeof window === "undefined") {
        console.log(
          "üîß Interceptor ejecut√°ndose en el servidor - saltando autenticaci√≥n"
        );
        return config;
      }

      console.log("üöÄ === INTERCEPTOR DE AXIOS EJECUT√ÅNDOSE ===");
      console.log("üìç URL de la petici√≥n:", config.url);

      // Siempre intentar obtener token desde Supabase (m√°s confiable)
      let token = await getTokenFromSupabase();

      // Si no hay token en Supabase, intentar cookies como fallback
      if (!token) {
        console.log("üç™ Intentando obtener token desde cookies...");
        token = getTokenFromCookies();
        console.log(
          "üç™ Token desde cookies:",
          token ? "Encontrado" : "No encontrado"
        );
      }

      // Agregar token al header si existe
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log("‚úÖ Token agregado al request exitosamente");
        console.log(
          "üîë Primeros caracteres del token:",
          token.substring(0, 20) + "..."
        );
      } else {
        console.warn(
          "‚ö†Ô∏è NO SE ENCONTR√ì TOKEN - La petici√≥n ser√° sin autorizaci√≥n"
        );
      }

      // Agregar headers adicionales de seguridad
      config.headers["X-Requested-With"] = "XMLHttpRequest";
      config.headers["Content-Type"] =
        config.headers["Content-Type"] || "application/json";

      console.log("üì§ Headers finales:", config.headers);
      console.log("üèÅ === FIN DEL INTERCEPTOR ===");

      return config;
    } catch (error) {
      console.error("‚ùå Error in request interceptor:", error);
      return config;
    }
  },
  (error) => {
    console.error("‚ùå Request interceptor error:", error);
    return Promise.reject(new Error(error));
  }
);
